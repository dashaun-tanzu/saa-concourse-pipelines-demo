resource_types:
  - name: time
    type: registry-image
    source: { repository: concourse/time-resource }

resources:
  - name: alpine
    type: registry-image
    source:
      repository: alpine
  - name: periodic
    type: time
    source:
      interval: 15m
  - name: templates
    type: git
    source:
      uri: https://github.com/dashaun-tanzu/saa-concourse-pipelines-demo
      branch: main

jobs:
  - name: discover-and-spawn
    serial: true
    plan:
      - get: templates
      - get: periodic
        trigger: true
      - get: alpine
      - task: crawl-github-and-generate-pipelines
        image: alpine
        timeout: 15m
        config:
          platform: linux
          inputs:
            - name: templates
          outputs:
            - name: pipeline-configs
          params:
            GITHUB_TOKEN: ((github_token))
            GITHUB_ORGS_JSON: ((github_orgs))
            API_BASE: ((api_base))
            FLY_TARGET: advisor-demo
            FLY_USERNAME: test
            FLY_PASSWORD: test
            CONCOURSE_URL: http://thunderwsl:8080
            MAVEN_PASSWORD: ((maven.password))
          run:
            path: sh
            args:
              - -exc
              - |
                apk add --no-cache curl jq yq

                # Download fly CLI
                curl -L "${CONCOURSE_URL}/api/v1/cli?arch=amd64&platform=linux" -o fly
                chmod +x fly
                mv fly /usr/local/bin/

                API_BASE="${API_BASE:-https://api.github.com}"

                # helper to page GitHub API and stream items
                gh_list() {
                  url="$1"
                  page=1
                  while : ; do
                    data="$(curl -fsSL \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      "${url}?per_page=100&page=${page}")"
                    [ -z "$data" ] && break
                    echo "$data" | jq -c '.[]'
                    [ "$(echo "$data" | jq 'length')" -lt 100 ] && break
                    page=$((page+1))
                  done
                }

                # Build repos list
                tmp_json="$(mktemp)"
                : > "$tmp_json"
                echo "$GITHUB_ORGS_JSON" | jq -r '.[]' | while read -r ORG; do
                  gh_list "${API_BASE}/orgs/${ORG}/repos" | while read -r row; do
                    archived=$(echo "$row" | jq -r '.archived')
                    disabled=$(echo "$row" | jq -r '.disabled')
                    if [ "$archived" = "true" ] || [ "$disabled" = "true" ]; then
                      continue
                    fi
                    full_name=$(echo "$row" | jq -r '.full_name')
                    clone_url=$(echo "$row" | jq -r '.clone_url')
                    safe_name=$(echo "$full_name" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
                    jq -n --arg full "$full_name" \
                          --arg clone "$clone_url" \
                          --arg safe "$safe_name" \
                          '{full_name:$full, clone_url:$clone, safe_name:$safe}' >> "$tmp_json"
                  done
                done

                # Convert to JSON array
                if [ -s "$tmp_json" ]; then
                  echo "[" > /tmp/list.json
                  paste -sd, "$tmp_json" >> /tmp/list.json
                  echo "]" >> /tmp/list.json
                else
                  echo "[]" > /tmp/list.json
                fi

                # Login to fly
                echo "$FLY_PASSWORD" | fly -t "$FLY_TARGET" login -c "$CONCOURSE_URL" -u "$FLY_USERNAME"

                # Generate and set pipelines for each repo
                cat /tmp/list.json | jq -r '.[] | @base64' | while read -r encoded_repo; do
                  repo_data=$(echo "$encoded_repo" | base64 -d)
                  repo_full_name=$(echo "$repo_data" | jq -r '.full_name')
                  repo_clone_url=$(echo "$repo_data" | jq -r '.clone_url')
                  repo_safe_name=$(echo "$repo_data" | jq -r '.safe_name')
                  pipeline_name="rewrite-${repo_safe_name}"

                  echo "Setting pipeline: $pipeline_name for repo: $repo_full_name"

                  # Create pipeline config with variable substitution
                  pipeline_config="pipeline-configs/${pipeline_name}.yml"
                  cp templates/pipelines/repo-pipeline.yml "$pipeline_config"

                  # Create vars file
                  vars_file="pipeline-configs/${pipeline_name}-vars.yml"
                  cat > "$vars_file" << EOF
                repo_full_name: $repo_full_name
                repo_clone_url: $repo_clone_url
                github_token: $GITHUB_TOKEN
                maven.password: $MAVEN_PASSWORD
                EOF

                  # Set the pipeline
                  fly -t "$FLY_TARGET" set-pipeline \
                    -p "$pipeline_name" \
                    -c "$pipeline_config" \
                    -l "$vars_file" \
                    --non-interactive

                  # Unpause the pipeline
                  fly -t "$FLY_TARGET" unpause-pipeline -p "$pipeline_name"
                done

                echo "Pipeline generation completed"