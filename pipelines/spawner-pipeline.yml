# spawner-pipeline.yml
# Vars you should provide via var_source or -v:
#   github_token
#   github_orgs: ["acme-inc","widgets-co"]
#   (optional) api_base: https://api.github.com

# If you're using Vault/SSM/etc, wire it here. Example:
# var_sources:
# - name: vault
#   type: vault
#   config:
#     url: https://vault.example.com
#     path_prefix: concourse/data
#     # ...auth config...
#   # then refer to ((vault:github_token)) etc.

resource_types:
  - name: time
    type: registry-image
    source: { repository: concourse/time-resource }

resources:
  - name: hourly
    type: time
    source:
      interval: 1h

jobs:
  - name: discover-and-spawn
    serial: true
    plan:
      - get: hourly
        trigger: true

      - task: crawl-github
        timeout: 15m
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: alpine }
          outputs:
            - name: repos
          params:
            GITHUB_TOKEN: ((github_token))
            GITHUB_ORGS_JSON: ((github_orgs))
            API_BASE: ((api_base))
          run:
            path: sh
            args:
              - -exc
              - |
                apk add --no-cache curl jq yq

                API_BASE="${API_BASE:-https://api.github.com}"

                # helper to page GitHub API and stream items
                gh_list() {
                  url="$1"
                  page=1
                  while : ; do
                    data="$(curl -fsSL \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      "${url}?per_page=100&page=${page}")"
                    [ -z "$data" ] && break
                    echo "$data" | jq -c '.[]'
                    [ "$(echo "$data" | jq 'length')" -lt 100 ] && break
                    page=$((page+1))
                  done
                }

                # Build a YAML array of repos we want pipelines for
                tmp_json="$(mktemp)"
                : > "$tmp_json"

                echo "$GITHUB_ORGS_JSON" | jq -r '.[]' | while read -r ORG; do
                  gh_list "${API_BASE}/orgs/${ORG}/repos" | while read -r row; do
                    archived=$(echo "$row" | jq -r '.archived')
                    disabled=$(echo "$row" | jq -r '.disabled')
                    if [ "$archived" = "true" ] || [ "$disabled" = "true" ]; then
                      continue
                    fi
                    full_name=$(echo "$row" | jq -r '.full_name')   # org/repo
                    clone_url=$(echo "$row" | jq -r '.clone_url')
                    safe_name=$(echo "$full_name" | tr '/' '-' | tr '[:upper:]' '[:lower:]')

                    jq -n --arg full "$full_name" \
                          --arg clone "$clone_url" \
                          --arg safe "$safe_name" \
                          '{full_name:$full, clone_url:$clone, safe_name:$safe}' >> "$tmp_json"
                  done
                done

                # Convert NDJSON to YAML list
                if [ -s "$tmp_json" ]; then
                  echo "[" > /tmp/list.json
                  paste -sd, "$tmp_json" >> /tmp/list.json
                  echo "]" >> /tmp/list.json
                else
                  echo "[]" > /tmp/list.json
                fi

                # repos/repos.yml will be a YAML array of objects:
                # - full_name: org/repo
                #   clone_url: https://github.com/org/repo.git
                #   safe_name: org-repo
                yq -P '.' /tmp/list.json > repos/repos.yml
                echo "Wrote $(wc -l < repos/repos.yml) lines to repos/repos.yml"

      # Load the YAML array into a local var 'repos'
      - load_var: repos
        file: repos/repos.yml

      # Iterate repos and set pipelines
      - across:
          - var: repo
            values: ((.:repos))
        do:
          - set_pipeline: rewrite-((repo.safe_name))
            file: repo-pipeline.yml
            instance_vars:
              repo_full_name: ((repo.full_name))
              repo_clone_url: ((repo.clone_url))
            vars:
              github_token: ((github_token))
            # If your Concourse supports it, you can auto-unpause with:
            # paused: false
